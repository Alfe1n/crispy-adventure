Database Setup Percetakan

-- ============================================
-- DATABASE SETUP
-- ============================================
DROP DATABASE IF EXISTS db_percetakan;
CREATE DATABASE db_percetakan 
CHARACTER SET utf8mb4 
COLLATE utf8mb4_unicode_ci;

USE db_percetakan;

-- ============================================
-- MASTER TABLES
-- ============================================

-- Tabel Role (Master untuk hak akses)
CREATE TABLE role (
    id_role INT PRIMARY KEY AUTO_INCREMENT,
    nama_role VARCHAR(50) NOT NULL UNIQUE,
    deskripsi TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- Tabel Status Pesanan (Master)
CREATE TABLE status_pesanan (
    id_status INT PRIMARY KEY AUTO_INCREMENT,
    nama_status VARCHAR(50) NOT NULL UNIQUE,
    urutan INT NOT NULL COMMENT 'Urutan tahapan proses',
    warna_badge VARCHAR(20) COMMENT 'Untuk UI: success, warning, danger, info',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- Tabel Status Desain (Master)
CREATE TABLE status_desain (
    id_status_desain INT PRIMARY KEY AUTO_INCREMENT,
    nama_status VARCHAR(50) NOT NULL UNIQUE,
    deskripsi TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- Tabel Jenis Layanan (Master)
CREATE TABLE jenis_layanan (
    id_layanan INT PRIMARY KEY AUTO_INCREMENT,
    nama_layanan VARCHAR(100) NOT NULL,
    deskripsi TEXT,
    harga_dasar DECIMAL(15,2) NOT NULL DEFAULT 0,
    satuan VARCHAR(20) DEFAULT 'pcs' COMMENT 'pcs, lembar, set, dll',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- Tabel Metode Pembayaran (Master) - FIXED VERSION
CREATE TABLE metode_pembayaran (
    id_metode INT PRIMARY KEY AUTO_INCREMENT,
    nama_metode VARCHAR(50) NOT NULL,
    tipe ENUM('bank_transfer', 'e_wallet', 'cash') NOT NULL,
    nomor_rekening VARCHAR(50) COMMENT 'Untuk bank_transfer',
    atas_nama VARCHAR(100) COMMENT 'Nama penerima',
    logo_path VARCHAR(255) COMMENT 'Path logo payment method',
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- Tabel Kendala Produksi (Master)
CREATE TABLE master_kendala (
    id_kendala_type INT PRIMARY KEY AUTO_INCREMENT,
    nama_kendala VARCHAR(100) NOT NULL,
    kategori ENUM('mesin', 'bahan', 'tenaga_kerja', 'lainnya') NOT NULL,
    solusi_umum TEXT COMMENT 'Panduan penanganan',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB;

-- ============================================
-- MAIN ENTITY TABLES
-- ============================================

-- Tabel User - FIXED VERSION
CREATE TABLE user (
    id_user INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL COMMENT 'BCrypt hash',
    email VARCHAR(100) NOT NULL UNIQUE,
    nama_lengkap VARCHAR(100) NOT NULL,
    id_role INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    last_login DATETIME NULL,
    failed_login_attempts INT DEFAULT 0,
    locked_until DATETIME NULL COMMENT 'Auto unlock setelah waktu ini',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_role) REFERENCES role(id_role) ON DELETE RESTRICT,
    INDEX idx_username (username),
    INDEX idx_email (email),
    INDEX idx_active (is_active)
) ENGINE=InnoDB;

-- Tabel Pelanggan
CREATE TABLE pelanggan (
    id_pelanggan INT PRIMARY KEY AUTO_INCREMENT,
    nama VARCHAR(100) NOT NULL,
    email VARCHAR(100),
    no_telepon VARCHAR(20) NOT NULL,
    alamat TEXT,
    media_komunikasi ENUM('whatsapp', 'email', 'telepon', 'website') DEFAULT 'whatsapp',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_nama (nama),
    INDEX idx_telepon (no_telepon)
) ENGINE=InnoDB;

-- Tabel Pesanan - FIXED VERSION
CREATE TABLE pesanan (
    id_pesanan INT PRIMARY KEY AUTO_INCREMENT,
    nomor_pesanan VARCHAR(50) NOT NULL UNIQUE COMMENT 'Format: PO-YYYYMMDD-0001',
    id_pelanggan INT NOT NULL,
    id_user_admin INT NOT NULL COMMENT 'Admin yang input',
    id_status INT NOT NULL,
    tanggal_pesanan DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    deadline DATE COMMENT 'Target selesai',
    catatan TEXT,
    total_biaya DECIMAL(15,2) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_pelanggan) REFERENCES pelanggan(id_pelanggan) ON DELETE RESTRICT,
    FOREIGN KEY (id_user_admin) REFERENCES user(id_user) ON DELETE RESTRICT,
    FOREIGN KEY (id_status) REFERENCES status_pesanan(id_status) ON DELETE RESTRICT,
    INDEX idx_nomor (nomor_pesanan),
    INDEX idx_pelanggan (id_pelanggan),
    INDEX idx_status (id_status),
    INDEX idx_tanggal (tanggal_pesanan)
) ENGINE=InnoDB;

-- Tabel Detail Pesanan (Composite)
CREATE TABLE detail_pesanan (
    id_detail INT PRIMARY KEY AUTO_INCREMENT,
    id_pesanan INT NOT NULL,
    id_layanan INT NOT NULL,
    jumlah INT NOT NULL DEFAULT 1,
    harga_satuan DECIMAL(15,2) NOT NULL,
    subtotal DECIMAL(15,2) NOT NULL,
    spesifikasi TEXT COMMENT 'Ukuran, warna, finishing, dll',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_pesanan) REFERENCES pesanan(id_pesanan) ON DELETE CASCADE,
    FOREIGN KEY (id_layanan) REFERENCES jenis_layanan(id_layanan) ON DELETE RESTRICT,
    INDEX idx_pesanan (id_pesanan)
) ENGINE=InnoDB;

-- Tabel Pembayaran - FIXED VERSION (KRITIS!)
CREATE TABLE pembayaran (
    id_pembayaran INT PRIMARY KEY AUTO_INCREMENT,
    id_pesanan INT NOT NULL,
    id_metode INT NOT NULL,
    jumlah DECIMAL(15,2) NOT NULL,
    status_pembayaran ENUM('pending', 'verified', 'failed', 'cancelled') DEFAULT 'pending',
    bukti_pembayaran_path VARCHAR(255) COMMENT 'Path ke file bukti transfer',
    tanggal_pembayaran DATETIME NOT NULL,
    tanggal_verifikasi DATETIME NULL,
    verified_by INT NULL COMMENT 'User yang verifikasi',
    catatan TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_pesanan) REFERENCES pesanan(id_pesanan) ON DELETE CASCADE,
    FOREIGN KEY (id_metode) REFERENCES metode_pembayaran(id_metode) ON DELETE RESTRICT,
    FOREIGN KEY (verified_by) REFERENCES user(id_user) ON DELETE SET NULL,
    INDEX idx_pesanan (id_pesanan),
    INDEX idx_status (status_pembayaran),
    INDEX idx_tanggal (tanggal_pembayaran)
) ENGINE=InnoDB;

-- Tabel Desain - FIXED VERSION (KRITIS!)
CREATE TABLE desain (
    id_desain INT PRIMARY KEY AUTO_INCREMENT,
    id_pesanan INT NOT NULL,
    id_designer INT NOT NULL COMMENT 'User yang mengerjakan desain',
    id_status_desain INT NOT NULL,
    file_desain_path VARCHAR(255),
    revisi_ke INT DEFAULT 1,
    tanggal_dibuat DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    tanggal_disetujui DATETIME NULL,
    catatan TEXT COMMENT 'Instruksi atau feedback',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_pesanan) REFERENCES pesanan(id_pesanan) ON DELETE CASCADE,
    FOREIGN KEY (id_designer) REFERENCES user(id_user) ON DELETE RESTRICT,
    FOREIGN KEY (id_status_desain) REFERENCES status_desain(id_status_desain) ON DELETE RESTRICT,
    INDEX idx_pesanan (id_pesanan),
    INDEX idx_designer (id_designer),
    INDEX idx_status (id_status_desain)
) ENGINE=InnoDB;

-- Tabel Revisi Desain (BARU - untuk track history)
CREATE TABLE revisi_desain (
    id_revisi INT PRIMARY KEY AUTO_INCREMENT,
    id_desain INT NOT NULL,
    revisi_ke INT NOT NULL,
    file_path VARCHAR(255) NOT NULL,
    catatan_revisi TEXT,
    direvisi_oleh INT NOT NULL COMMENT 'Designer yang revisi',
    tanggal_revisi DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_desain) REFERENCES desain(id_desain) ON DELETE CASCADE,
    FOREIGN KEY (direvisi_oleh) REFERENCES user(id_user) ON DELETE RESTRICT,
    INDEX idx_desain (id_desain)
) ENGINE=InnoDB;

-- Tabel Produksi - FIXED VERSION (KRITIS!)
CREATE TABLE produksi (
    id_produksi INT PRIMARY KEY AUTO_INCREMENT,
    id_pesanan INT NOT NULL,
    id_operator INT NOT NULL COMMENT 'User produksi yang handle',
    tanggal_mulai DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    tanggal_selesai DATETIME NULL,
    progres_persen INT DEFAULT 0 CHECK (progres_persen >= 0 AND progres_persen <= 100),
    status_produksi ENUM('antrian', 'proses', 'selesai', 'terkendala') DEFAULT 'antrian',
    mesin_digunakan VARCHAR(100) COMMENT 'Nama mesin cetak',
    catatan TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (id_pesanan) REFERENCES pesanan(id_pesanan) ON DELETE CASCADE,
    FOREIGN KEY (id_operator) REFERENCES user(id_user) ON DELETE RESTRICT,
    INDEX idx_pesanan (id_pesanan),
    INDEX idx_operator (id_operator),
    INDEX idx_status (status_produksi)
) ENGINE=InnoDB;

-- Tabel Kendala Produksi
CREATE TABLE kendala_produksi (
    id_kendala INT PRIMARY KEY AUTO_INCREMENT,
    id_produksi INT NOT NULL,
    id_kendala_type INT NULL,
    deskripsi TEXT NOT NULL,
    solusi TEXT,
    status ENUM('open', 'in_progress', 'resolved') DEFAULT 'open',
    dilaporkan_oleh INT NOT NULL,
    tanggal_lapor DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    tanggal_selesai DATETIME NULL,
    FOREIGN KEY (id_produksi) REFERENCES produksi(id_produksi) ON DELETE CASCADE,
    FOREIGN KEY (id_kendala_type) REFERENCES master_kendala(id_kendala_type) ON DELETE SET NULL,
    FOREIGN KEY (dilaporkan_oleh) REFERENCES user(id_user) ON DELETE RESTRICT,
    INDEX idx_produksi (id_produksi),
    INDEX idx_status (status)
) ENGINE=InnoDB;

-- Tabel Log Aktivitas - FIXED VERSION (KRITIS!)
CREATE TABLE log_aktivitas (
    id_log INT PRIMARY KEY AUTO_INCREMENT,
    id_user INT NOT NULL COMMENT 'User yang melakukan aksi',
    aksi VARCHAR(255) NOT NULL COMMENT 'login, logout, create_pesanan, dll',
    tabel_terkait VARCHAR(50) COMMENT 'Nama tabel yang diubah',
    id_record INT COMMENT 'ID record yang diubah',
    detail_perubahan TEXT COMMENT 'JSON data sebelum/sesudah',
    ip_address VARCHAR(45) COMMENT 'IP address user',
    user_agent VARCHAR(255) COMMENT 'Browser/device info',
    timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (id_user) REFERENCES user(id_user) ON DELETE CASCADE,
    INDEX idx_user (id_user),
    INDEX idx_timestamp (timestamp),
    INDEX idx_aksi (aksi)
) ENGINE=InnoDB;

-- Tabel Laporan
CREATE TABLE laporan (
    id_laporan INT PRIMARY KEY AUTO_INCREMENT,
    jenis_laporan ENUM('mingguan', 'bulanan', 'kustom') NOT NULL,
    tanggal_mulai DATE NOT NULL,
    tanggal_selesai DATE NOT NULL,
    file_path VARCHAR(255) COMMENT 'Path ke file Excel/PDF',
    total_pesanan INT DEFAULT 0,
    total_pendapatan DECIMAL(15,2) DEFAULT 0,
    generated_by INT NOT NULL,
    generated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (generated_by) REFERENCES user(id_user) ON DELETE RESTRICT,
    INDEX idx_tanggal (tanggal_mulai, tanggal_selesai),
    INDEX idx_jenis (jenis_laporan)
) ENGINE=InnoDB;

-- ============================================
-- OFFLINE MODE SUPPORT (BARU - KRITIS!)
-- ============================================

-- Tabel Sync Queue untuk Offline Mode
CREATE TABLE sync_queue (
    id_sync INT PRIMARY KEY AUTO_INCREMENT,
    table_name VARCHAR(50) NOT NULL COMMENT 'Tabel yang diubah',
    operation ENUM('INSERT', 'UPDATE', 'DELETE') NOT NULL,
    record_id INT NOT NULL COMMENT 'ID record yang diubah',
    data_json TEXT NOT NULL COMMENT 'Snapshot data dalam JSON',
    synced BOOLEAN DEFAULT FALSE,
    sync_priority INT DEFAULT 1 COMMENT '1=low, 5=high',
    created_by INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    synced_at TIMESTAMP NULL,
    error_message TEXT COMMENT 'Jika gagal sync',
    retry_count INT DEFAULT 0,
    FOREIGN KEY (created_by) REFERENCES user(id_user) ON DELETE CASCADE,
    INDEX idx_synced (synced),
    INDEX idx_table (table_name),
    INDEX idx_created_at (created_at)
) ENGINE=InnoDB;

-- Tabel Connection Log (monitoring online/offline)
CREATE TABLE connection_log (
    id_log INT PRIMARY KEY AUTO_INCREMENT,
    status ENUM('online', 'offline') NOT NULL,
    timestamp DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    duration_seconds INT COMMENT 'Berapa lama dalam status tersebut',
    INDEX idx_timestamp (timestamp)
) ENGINE=InnoDB;

-- ============================================
-- VIEWS UNTUK REPORTING
-- ============================================

-- View: Pesanan dengan detail lengkap
CREATE OR REPLACE VIEW v_pesanan_lengkap AS
SELECT 
    p.id_pesanan,
    p.nomor_pesanan,
    p.tanggal_pesanan,
    p.deadline,
    pl.nama AS nama_pelanggan,
    pl.no_telepon,
    u.nama_lengkap AS admin_input,
    sp.nama_status,
    sp.urutan AS urutan_status,
    p.total_biaya,
    COUNT(dp.id_detail) AS jumlah_item,
    COALESCE(SUM(CASE WHEN pm.status_pembayaran = 'verified' THEN pm.jumlah ELSE 0 END), 0) AS total_dibayar,
    (p.total_biaya - COALESCE(SUM(CASE WHEN pm.status_pembayaran = 'verified' THEN pm.jumlah ELSE 0 END), 0)) AS sisa_pembayaran
FROM pesanan p
JOIN pelanggan pl ON p.id_pelanggan = pl.id_pelanggan
JOIN user u ON p.id_user_admin = u.id_user
JOIN status_pesanan sp ON p.id_status = sp.id_status
LEFT JOIN detail_pesanan dp ON p.id_pesanan = dp.id_pesanan
LEFT JOIN pembayaran pm ON p.id_pesanan = pm.id_pesanan
GROUP BY p.id_pesanan;

-- View: Dashboard statistik
CREATE OR REPLACE VIEW v_dashboard_stats AS
SELECT 
    (SELECT COUNT(*) FROM pesanan WHERE DATE(tanggal_pesanan) = CURDATE()) AS pesanan_hari_ini,
    (SELECT COUNT(*) FROM pesanan WHERE WEEK(tanggal_pesanan) = WEEK(CURDATE())) AS pesanan_minggu_ini,
    (SELECT COUNT(*) FROM pesanan WHERE id_status IN (SELECT id_status FROM status_pesanan WHERE nama_status = 'Selesai')) AS pesanan_selesai,
    (SELECT COUNT(*) FROM pembayaran WHERE status_pembayaran = 'pending') AS pembayaran_pending,
    (SELECT COALESCE(SUM(total_biaya), 0) FROM pesanan WHERE MONTH(tanggal_pesanan) = MONTH(CURDATE())) AS pendapatan_bulan_ini,
    (SELECT COUNT(*) FROM produksi WHERE status_produksi = 'proses') AS produksi_berjalan,
    (SELECT COUNT(*) FROM kendala_produksi WHERE status = 'open') AS kendala_aktif;

-- View: Produksi yang butuh perhatian
CREATE OR REPLACE VIEW v_produksi_alert AS
SELECT 
    pr.id_produksi,
    p.nomor_pesanan,
    pl.nama AS nama_pelanggan,
    u.nama_lengkap AS operator,
    pr.progres_persen,
    pr.status_produksi,
    pr.tanggal_mulai,
    DATEDIFF(CURDATE(), pr.tanggal_mulai) AS hari_berjalan,
    p.deadline,
    DATEDIFF(p.deadline, CURDATE()) AS hari_tersisa,
    CASE 
        WHEN pr.status_produksi = 'terkendala' THEN 'Terkendala'
        WHEN DATEDIFF(p.deadline, CURDATE()) < 2 THEN 'Deadline Dekat'
        WHEN DATEDIFF(CURDATE(), pr.tanggal_mulai) > 5 AND pr.progres_persen < 50 THEN 'Progress Lambat'
        ELSE 'Normal'
    END AS alert_type
FROM produksi pr
JOIN pesanan p ON pr.id_pesanan = p.id_pesanan
JOIN pelanggan pl ON p.id_pelanggan = pl.id_pelanggan
JOIN user u ON pr.id_operator = u.id_user
WHERE pr.status_produksi != 'selesai'
HAVING alert_type != 'Normal';

-- ============================================
-- TRIGGERS
-- ============================================

-- Trigger: Auto update total_biaya pesanan setelah insert/update detail
DELIMITER $$

CREATE TRIGGER trg_after_insert_detail_pesanan
AFTER INSERT ON detail_pesanan
FOR EACH ROW
BEGIN
    UPDATE pesanan 
    SET total_biaya = (
        SELECT COALESCE(SUM(subtotal), 0) 
        FROM detail_pesanan 
        WHERE id_pesanan = NEW.id_pesanan
    )
    WHERE id_pesanan = NEW.id_pesanan;
END$$

CREATE TRIGGER trg_after_update_detail_pesanan
AFTER UPDATE ON detail_pesanan
FOR EACH ROW
BEGIN
    UPDATE pesanan 
    SET total_biaya = (
        SELECT COALESCE(SUM(subtotal), 0) 
        FROM detail_pesanan 
        WHERE id_pesanan = NEW.id_pesanan
    )
    WHERE id_pesanan = NEW.id_pesanan;
END$$

CREATE TRIGGER trg_after_delete_detail_pesanan
AFTER DELETE ON detail_pesanan
FOR EACH ROW
BEGIN
    UPDATE pesanan 
    SET total_biaya = (
        SELECT COALESCE(SUM(subtotal), 0) 
        FROM detail_pesanan 
        WHERE id_pesanan = OLD.id_pesanan
    )
    WHERE id_pesanan = OLD.id_pesanan;
END$$

-- Trigger: Auto generate nomor pesanan
CREATE TRIGGER trg_before_insert_pesanan
BEFORE INSERT ON pesanan
FOR EACH ROW
BEGIN
    DECLARE next_num INT;
    DECLARE today VARCHAR(8);
    
    SET today = DATE_FORMAT(CURDATE(), '%Y%m%d');
    
    SELECT COALESCE(MAX(CAST(SUBSTRING(nomor_pesanan, 12) AS UNSIGNED)), 0) + 1
    INTO next_num
    FROM pesanan
    WHERE nomor_pesanan LIKE CONCAT('PO-', today, '%');
    
    SET NEW.nomor_pesanan = CONCAT('PO-', today, '-', LPAD(next_num, 4, '0'));
END$$

-- Trigger: Log aktivitas penting
CREATE TRIGGER trg_after_update_status_pesanan
AFTER UPDATE ON pesanan
FOR EACH ROW
BEGIN
    IF OLD.id_status != NEW.id_status THEN
        INSERT INTO log_aktivitas (
            id_user, 
            aksi, 
            tabel_terkait, 
            id_record, 
            detail_perubahan
        ) VALUES (
            NEW.id_user_admin,
            'update_status_pesanan',
            'pesanan',
            NEW.id_pesanan,
            CONCAT('Status berubah dari ', 
                   (SELECT nama_status FROM status_pesanan WHERE id_status = OLD.id_status),
                   ' ke ',
                   (SELECT nama_status FROM status_pesanan WHERE id_status = NEW.id_status))
        );
    END IF;
END$$

DELIMITER ;

-- ============================================
-- STORED PROCEDURES
-- ============================================

DELIMITER $$

-- Procedure: Generate laporan mingguan
CREATE PROCEDURE sp_generate_laporan_mingguan(
    IN p_tanggal_mulai DATE,
    IN p_tanggal_selesai DATE,
    IN p_generated_by INT
)
BEGIN
    DECLARE v_total_pesanan INT;
    DECLARE v_total_pendapatan DECIMAL(15,2);
    
    -- Hitung statistik
    SELECT COUNT(*), COALESCE(SUM(total_biaya), 0)
    INTO v_total_pesanan, v_total_pendapatan
    FROM pesanan
    WHERE tanggal_pesanan BETWEEN p_tanggal_mulai AND p_tanggal_selesai;
    
    -- Insert ke tabel laporan
    INSERT INTO laporan (
        jenis_laporan,
        tanggal_mulai,
        tanggal_selesai,
        total_pesanan,
        total_pendapatan,
        generated_by
    ) VALUES (
        'mingguan',
        p_tanggal_mulai,
        p_tanggal_selesai,
        v_total_pesanan,
        v_total_pendapatan,
        p_generated_by
    );
    
    -- Return ID laporan yang baru dibuat
    SELECT LAST_INSERT_ID() AS id_laporan;
END$$

-- Procedure: Get pesanan yang butuh follow up
CREATE PROCEDURE sp_get_pesanan_follow_up()
BEGIN
    SELECT 
        p.id_pesanan,
        p.nomor_pesanan,
        pl.nama AS nama_pelanggan,
        pl.no_telepon,
        sp.nama_status,
        p.tanggal_pesanan,
        DATEDIFF(CURDATE(), p.tanggal_pesanan) AS hari_berlalu,
        CASE 
            WHEN sp.nama_status = 'Menunggu Pembayaran' AND DATEDIFF(CURDATE(), p.tanggal_pesanan) > 3 
                THEN 'Pembayaran tertunda >3 hari'
            WHEN sp.nama_status = 'Menunggu Persetujuan Desain' AND DATEDIFF(CURDATE(), p.tanggal_pesanan) > 5 
                THEN 'Desain belum disetujui >5 hari'
            WHEN p.deadline < CURDATE() AND sp.nama_status != 'Selesai' 
                THEN 'Melewati deadline'
            ELSE 'Normal'
        END AS alasan_follow_up
    FROM pesanan p
    JOIN pelanggan pl ON p.id_pelanggan = pl.id_pelanggan
    JOIN status_pesanan sp ON p.id_status = sp.id_status
    HAVING alasan_follow_up != 'Normal'
    ORDER BY p.tanggal_pesanan ASC;
END$$

DELIMITER ;

-- ============================================
-- INDEXES TAMBAHAN UNTUK PERFORMANCE
-- ============================================

-- Composite indexes untuk query yang sering dipakai
CREATE INDEX idx_pesanan_tanggal_status ON pesanan(tanggal_pesanan, id_status);
CREATE INDEX idx_pembayaran_pesanan_status ON pembayaran(id_pesanan, status_pembayaran);
CREATE INDEX idx_produksi_status_progres ON produksi(status_produksi, progres_persen);
CREATE INDEX idx_log_user_timestamp ON log_aktivitas(id_user, timestamp);

-- Full-text index untuk search
ALTER TABLE pelanggan ADD FULLTEXT idx_fulltext_search (nama, email, no_telepon);
ALTER TABLE pesanan ADD FULLTEXT idx_fulltext_catatan (catatan);